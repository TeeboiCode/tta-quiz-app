const quizQuestions = [
  {
    id: 1,
    question: "What is the data type of `true` in JavaScript?",
    options: ["String", "Boolean", "Number", "Object"],
    correct: "Boolean",
  },
  {
    id: 2,
    question: "Which keyword is used to define a block-scoped variable?",
    options: ["var", "let", "function", "global"],
    correct: "let",
  },
  {
    id: 3,
    question: "What is the result of `typeof null` in JavaScript?",
    options: ["null", "undefined", "object", "boolean"],
    correct: "object",
  },
  {
    id: 4,
    question: "Variables declared with 'const' cannot:",
    options: ["Be redeclared", "Be reassigned", "Be global", "Be block-scoped"],
    correct: "Be reassigned",
  },
  {
    id: 5,
    question: "Which data type represents a sequence of characters?",
    options: ["String", "Boolean", "Array", "Number"],
    correct: "String",
  },
  {
    id: 6,
    question:
      "What is the default value of an uninitialized variable in JavaScript?",
    options: ["null", "undefined", "0", "''"],
    correct: "undefined",
  },
  {
    id: 7,
    question: "Which loop is best for iterating a fixed number of times?",
    options: ["while", "for", "do...while", "foreach"],
    correct: "for",
  },
  {
    id: 8,
    question: "Where can a variable declared with 'var' be accessed?",
    options: ["Block", "Function", "Global", "Both Function and Global"],
    correct: "Both Function and Global",
  },
  {
    id: 9,
    question: "What will the 'if' condition evaluate to if the value is `0`?",
    options: ["true", "false", "undefined", "null"],
    correct: "false",
  },
  {
    id: 10,
    question: "What is the output of: `let x; console.log(x);`?",
    options: ["null", "undefined", "0", "Error"],
    correct: "undefined",
  },
  {
    id: 11,
    question: "Which statement best defines 'global scope'?",
    options: [
      "Variables accessible inside a single block",
      "Variables accessible throughout the program",
      "Variables declared inside a function",
      "Variables declared inside a loop",
    ],
    correct: "Variables accessible throughout the program",
  },
  {
    id: 12,
    question: "What does `break` do inside a loop?",
    options: [
      "Skips the current iteration",
      "Stops the loop completely",
      "Exits the function",
      "Continues to the next loop",
    ],
    correct: "Stops the loop completely",
  },
  {
    id: 13,
    question: "What is the correct syntax for a conditional 'if' statement?",
    options: [
      "if condition {}",
      "if (condition)",
      "if (condition) {}",
      "if {condition}",
    ],
    correct: "if (condition) {}",
  },
  {
    id: 14,
    question: "How do you declare a constant in JavaScript?",
    options: ["var", "let", "const", "constant"],
    correct: "const",
  },
  {
    id: 15,
    question: "Which loop always executes at least once?",
    options: ["for", "while", "do...while", "foreach"],
    correct: "do...while",
  },
  {
    id: 16,
    question: "What is the main difference between 'let' and 'var'?",
    options: [
      "'let' is block-scoped, 'var' is function-scoped",
      "'let' is function-scoped, 'var' is block-scoped",
      "Both are function-scoped",
      "Both are block-scoped",
    ],
    correct: "'let' is block-scoped, 'var' is function-scoped",
  },
  {
    id: 17,
    question: "How do you define an array in JavaScript?",
    options: [
      "Using parentheses ()",
      "Using curly braces {}",
      "Using square brackets []",
      "Using angle brackets <>",
    ],
    correct: "Using square brackets []",
  },
  {
    id: 18,
    question: "What will `if ([]) { console.log('true') }` log?",
    options: ["true", "false", "undefined", "Error"],
    correct: "true",
  },
  {
    id: 19,
    question: "Which of the following is not a loop in JavaScript?",
    options: ["for", "while", "foreach", "loop"],
    correct: "loop",
  },
  {
    id: 20,
    question: "Which statement skips the current iteration of a loop?",
    options: ["break", "continue", "skip", "exit"],
    correct: "continue",
  },
  {
    id: 21,
    question: "What does `typeof NaN` return?",
    options: ["Number", "String", "Boolean", "NaN"],
    correct: "Number",
  },
  {
    id: 22,
    question:
      "What happens if you declare a variable with 'var' multiple times?",
    options: [
      "Throws an error",
      "Overwrites the previous declaration",
      "Creates a new variable",
      "Ignored",
    ],
    correct: "Overwrites the previous declaration",
  },
  {
    id: 23,
    question: "What is block scope in JavaScript?",
    options: [
      "Variables defined globally",
      "Variables accessible only within a block",
      "Variables declared with 'var'",
      "Variables accessible anywhere",
    ],
    correct: "Variables accessible only within a block",
  },
  {
    id: 24,
    question: "Which loop will execute while a condition is true?",
    options: ["for", "while", "foreach", "do...while"],
    correct: "while",
  },
  {
    id: 25,
    question: "What is the result of `if (null)`?",
    options: ["true", "false", "undefined", "Error"],
    correct: "false",
  },
  {
    id: 26,
    question: "How do you check if two values are equal and of the same type?",
    options: ["==", "===", "=", "!=="],
    correct: "===",
  },
  {
    id: 27,
    question: "What is the result of `typeof undefined`?",
    options: ["undefined", "null", "string", "Error"],
    correct: "undefined",
  },
  {
    id: 28,
    question: "What does the `else` statement do?",
    options: [
      "Executes when 'if' condition is true",
      "Executes when 'if' condition is false",
      "Ends the program",
      "Defines a new condition",
    ],
    correct: "Executes when 'if' condition is false",
  },
  {
    id: 29,
    question: "What is a conditional statement?",
    options: [
      "A loop",
      "A block of code that runs if a condition is true",
      "A function",
      "A variable",
    ],
    correct: "A block of code that runs if a condition is true",
  },
  {
    id: 30,
    question: "Which of the following is a valid 'for' loop syntax?",
    options: [
      "for i = 0 to 10",
      "for (i < 10; i++)",
      "for (let i = 0; i < 10; i++)",
      "for i in 10",
    ],
    correct: "for (let i = 0; i < 10; i++)",
  },
  {
    id: 31,
    question: "What does `const` stand for in JavaScript?",
    options: ["Constant", "Constructor", "Controller", "Condition"],
    correct: "Constant",
  },
  {
    id: 32,
    question: "Which of the following cannot be re-declared in JavaScript?",
    options: ["var", "let", "const", "None of the above"],
    correct: "const",
  },
  {
    id: 33,
    question:
      "Which type of loop is best for iterating over the properties of an object?",
    options: ["for", "while", "for...in", "forEach"],
    correct: "for...in",
  },
  {
    id: 34,
    question: "What will `if (undefined)` evaluate to?",
    options: ["true", "false", "undefined", "null"],
    correct: "false",
  },
  {
    id: 35,
    question: "Which of the following is not a data type in JavaScript?",
    options: ["Number", "Boolean", "Character", "String"],
    correct: "Character",
  },
  {
    id: 36,
    question:
      "What is the scope of a variable declared with 'var' in a function?",
    options: [
      "Global",
      "Local to the function",
      "Block",
      "Both Block and Global",
    ],
    correct: "Local to the function",
  },
  {
    id: 37,
    question: "What does `let` allow you to do?",
    options: [
      "Declare a global variable",
      "Declare a variable with block scope",
      "Declare a constant",
      "Declare a variable without initialization",
    ],
    correct: "Declare a variable with block scope",
  },
  {
    id: 38,
    question: "Which statement about the 'while' loop is true?",
    options: [
      "It executes once regardless of condition",
      "It executes while the condition is true",
      "It initializes variables automatically",
      "It requires a counter variable",
    ],
    correct: "It executes while the condition is true",
  },
  {
    id: 39,
    question: "What will `if ('false')` evaluate to?",
    options: ["true", "false", "undefined", "Error"],
    correct: "true",
  },
  {
    id: 40,
    question: "Which keyword is used to terminate a loop in JavaScript?",
    options: ["continue", "exit", "break", "stop"],
    correct: "break",
  },
];
